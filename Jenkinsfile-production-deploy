podTemplate(label: 'san-rewards-relay-production-deploy', containers: [
    containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.17.17', command: 'cat', ttyEnabled: true),
    containerTemplate(name: 'docker', image: 'docker', ttyEnabled: true, command: 'cat', envVars: [
        envVar(key: 'DOCKER_HOST', value: 'tcp://docker-host-docker-host:2375')
      ]),
    containerTemplate(name: 'awscli', image: 'mikesir87/aws-cli', ttyEnabled: true, command: 'cat', envVars: [
      envVar(key: 'AWS_DEFAULT_REGION', value: 'eu-central-1'),
      secretEnvVar(key: 'AWS_ACCESS_KEY_ID', secretName: 'san-rewards-ecr-env', secretKey: 'awsAccessKeyId'),
      secretEnvVar(key: 'AWS_SECRET_ACCESS_KEY', secretName: 'san-rewards-ecr-env', secretKey: 'awsSecretAccessKey')
    ])
  ]) {
  node('san-rewards-relay-production-deploy') {
    stage('Update deployment') {
      def scmVars = checkout scm
      def gitCommit = scmVars.GIT_COMMIT

      withCredentials([
          string(
            credentialsId: 'aws_account_id',
            variable: 'aws_account_id'
          ),
          file(
            credentialsId: 'production_kubeconfig',
            variable: 'production_kubeconfig'
          )
        ]){
        
        def awsRegistry = "${env.aws_account_id}.dkr.ecr.eu-central-1.amazonaws.com"
        def sourceImage = "${awsRegistry}/san-rewards-relay"
        def taggedSource = "${sourceImage}:${gitCommit}"
        def kubectl = "kubectl --kubeconfig='${env.production_kubeconfig}' --context=jenkins"

	/* Check if ECR image exists */

	container('awscli') { 
	  def ecrimagecheck = sh(returnStatus:true, returnStdout: false, script: "aws ecr describe-images --repository-name san-rewards-relay --image-ids imageTag=${gitCommit}" ) 
	  if (ecrimagecheck != 0) { 
	    currentBuild.result = 'FAILED' 
	    error 'Missing imageId ${taggedSource} in ECR repository' 
	  } 
	} 

        /* Deploy the image */

        container('kubectl') { 
          sh "${kubectl} version" 
          sh "${kubectl} set image deployment/san-rewards-relay san-rewards-relay=${taggedSource}" 
        } 
        
        /* Tag the deployed image */
        container('docker') { 
          
          def timestampTag = "production-${env.TIMESTAMP_IMAGE_TAG}" 
          def taggedDest = "${sourceImage}:production" 
          def timestamped = "${sourceImage}:${timestampTag}" 
          
          docker.withRegistry("https://${awsRegistry}", "ecr:eu-central-1:ecr-credentials") { 
            sh "docker pull ${taggedSource}" 
            sh "docker tag ${taggedSource} ${taggedDest}" 
            sh "docker tag ${taggedSource} ${timestamped}" 
            sh "docker push ${taggedDest}" 
            sh "docker push ${timestamped}" 
	    /* cleanup  */
            sh "docker image rm ${taggedSource}" 
            sh "docker image rm ${taggedDest}" 
            sh "docker image rm ${timestamped}" 
          } 
        } 
      }
    }
  }
}
